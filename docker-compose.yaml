#src: https://github.com/docker-library/docs/blob/master/postgres/README.md
# Use postgres/example user/password credentials
version: '3.1'

services:

  db:
    image: postgres
    build: 
      context: postgres
      dockerfile: postgres.Dockerfile
    container_name: photoproject-db
    restart: "no"
    environment:
      POSTGRES_PASSWORD: photoproject-password
      POSTGRES_USER: photoproject-username
    # volumes:
      # - ./postgres/*.sql:/docker-entrypoint-initdb.d/
      #above is example of standart postgres setup

  adminer:
    image: adminer
    container_name: adminer_interface
    restart: "no"
    ports:
      - 8080:8080
    depends_on:
      - db
    
  api:
    build: 
      context: api/
      dockerfile: api.Dockerfile
    container_name: photoproject-api
    restart: "no"
    depends_on:
      - db
    ports:
      - 8999:9000
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://photoproject-db:5432/
      - SPRING_DATASOURCE_USERNAME=photoproject-username
      - SPRING_DATASOURCE_PASSWORD=photoproject-password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - crossOrigin=http://localhost:4200
      - spring.jpa.open-in-view=false
      - hikari.driverClassName=org.postgresql.Driver
      - hikari.jdbcUrl=jdbc:postgresql://photoproject-db:5432/
      - hikari.username=photoproject-username
      - hikari.password=photoproject-password
      - hikari.minimumIdle=3
      - hikari.maximumPoolSize=10
      - keycloak.realm=mainrealm
      - keycloak.auth-server-url=http://127.0.0.1:8081
      - keycloak.ssl-required=external
      - keycloak.resource=demoapp
      - keycloak.credentials.secret=11111111-1111-1111-1111-111111111111
      - keycloak.use-resource-role-mappings=true

  app:
    build:
      context: app
      dockerfile: app.Dockerfile
    container_name: photoproject-app
    restart: "no"
    ports:
      - 9000:80
    # TODO: check port above
    depends_on:
    - db
    - api

  mysql:
      image: mysql:5.7
      # volumes:
      #   - mysql_data:/var/lib/mysql
      environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: keycloak
        MYSQL_USER: keycloak
        MYSQL_PASSWORD: password
  keycloak:
      image: quay.io/keycloak/keycloak
      environment:
        DB_VENDOR: MYSQL
        DB_ADDR: mysql
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the MySQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "connectTimeout=30000"
      ports:
        - 8888:8080
      depends_on:
        - mysql
      command:
       - start-dev


# Run docker-compose -f Docker-compose.yml up,
#wait for it to initialize completely, and visit http://swarm-ip:8080, http://localhost:8080, or http://host-ip:8080 (as appropriate).

#If you would like to do additional initialization in an image derived from this one, add one or more *.sql, *.sql.gz, or *.sh scripts
# under /docker-entrypoint-initdb.d (creating the directory if necessary). After the entrypoint calls initdb to create the default postgres user and database,
# it will run any *.sql files, run any executable *.sh scripts, and source any non-executable *.sh scripts found in that directory to do further initialization before starting the service.


# Warning: scripts in /docker-entrypoint-initdb.d are only run if you start the container with a data directory that is empty;
# any pre-existing database will be left untouched on container startup. One common problem is that if one of your /docker-entrypoint-initdb.d scripts fails
# (which will cause the entrypoint script to exit) and your orchestrator restarts the container with the already initialized data directory, it will not continue on with your scripts.

# connection string $ docker exec -it main_container_full_name psql -h postgresdb -U docker mydatabase